import{_ as a,c as l,o as i,a2 as e}from"./chunks/framework.CjwF4VHu.js";const b=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"技术笔记/计算机科学与技术/数据结构.md","filePath":"技术笔记/计算机科学与技术/数据结构.md","lastUpdated":1709093239000}'),t={name:"技术笔记/计算机科学与技术/数据结构.md"},r=e('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="常见数据结构" tabindex="-1">常见数据结构 <a class="header-anchor" href="#常见数据结构" aria-label="Permalink to &quot;常见数据结构&quot;">​</a></h2><h3 id="顺序表和链表" tabindex="-1">顺序表和链表 <a class="header-anchor" href="#顺序表和链表" aria-label="Permalink to &quot;顺序表和链表&quot;">​</a></h3><p>线性表一般有顺序存储结构与链式存储结构两种存储方式。按顺序存储结构建立起来的线性表称为顺序表，按链式存储结构建立起来的线性表称为线性链表。</p><h3 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h3><p>又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</p><p>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素。从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p>栈也称为后进先出线性表。</p><h3 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h3><p>和栈一样，队列是一种操作受限制的线性表。其限制是它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><p>队列又称为先进先出（FIFO — first in first out）线性表。</p><h3 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h3><p>是由根结点和若干棵子树构成的。</p><p>树是由一个集合以及在该集合上定义的一种关系构成的。集合中的元素称为树的结点，所定义的关系称为父子关系。父子关系在树的结点之间建立了一个层次结构。在这种层次结构中有一个结点具有特殊的地位，这个结点称为该树的根结点，或称为树根。</p><h4 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h4><p>是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。</p><p>二叉树常被用于实现二叉查找树和二叉堆。</p><p>满二叉树指除叶子节点外的所有根节点都有两个子节点的二叉树。完全二叉树指所有节点按照次序（广度遍历的那个次序）组成的二叉树。</p><h3 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h3><p>图是一种网状结构，图中的每个点都可以和其他点相连，并没有前后关系和层次关系。</p><p>概念：顶点、边、有向图、无向图、度、权、路径长度、连通图、强连通图</p><p>可用存储结构：邻接矩阵存储、邻接表存储</p><h3 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h3><p>设有 n 个元素的序列 R1、R2、...、Rn，当其所有的关键字值满足条件 Ri.key &gt;= R2i.key 且 Ri.key &gt;= R2i+1.key ( i = 1,2,3,...,n ) 时，称该序列为大根堆（大顶堆）；当其所有的关键字值满足条件 Ri.key &lt;= R2i.key 且 Ri.key &lt;= R2i+1.key ( i = 1,2,3,...,n ) 时，称该序列为小根堆（小顶堆）；</p><p>大顶堆（小顶堆）是一棵完全二叉树。</p><h2 id="结构体和共用体" tabindex="-1">结构体和共用体 <a class="header-anchor" href="#结构体和共用体" aria-label="Permalink to &quot;结构体和共用体&quot;">​</a></h2><p>结构体（struct）：</p><ul><li>是由一系列具有相同类型或不同类型的数据构成的数据集合，叫做结构。</li><li>结构体指的是一种数据结构，是 C 语言中聚合数据类型的一类。</li><li>结构体可以被声明为变量、指针或数组等，用以实现较复杂的数据结构。</li><li>结构体同时也是一些元素的集合，这些元素称为结构体的成员，且这些成员可以为不同的类型，成员一般用名字访问。</li></ul><p>共用体（union）：</p><ul><li>这种几个不同的变量共同占用一段内存的结构类型，在 C 语言中，被称作“共用体”类型结构，简称共用体。</li><li>不能引用共用体变量，而只能引用共用体变量中的成员。</li></ul><h2 id="逻辑结构" tabindex="-1">逻辑结构 <a class="header-anchor" href="#逻辑结构" aria-label="Permalink to &quot;逻辑结构&quot;">​</a></h2><p>集合：</p><ul><li>在集合结构中，数据元素之间的关系是“属于同一个集合”。</li><li>数据元素之间除了同属一个集合外，不存在其他关系。</li></ul><p>线性结构：</p><ul><li>在该结构中，数据元素除了同属于一个集合外，数据元素之间还存在着一对一的顺序关系。</li></ul><p>树形结构：（层次结构）</p><ul><li>该结构的数据元素之间存在着一对多的层次关系。</li></ul><p>图状结构：（网状结构）</p><ul><li>该结构的数据元素之间存在着多对多的任意关系，图状结构也称为网状结构。</li></ul><h2 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h2><p>顺序存储：</p><ul><li>通常用于存储具有线性结构的数据。</li><li>将逻辑上相邻的结点存储在连续存储区域的相邻的存储单元中，使得逻辑相邻的结点一定是物理位置相邻。</li></ul><p>链式存储：</p><ul><li>如果计算机的内存中，没有连续的空间提供给大量的数据进行存储，</li><li>那么就需要利用零散的空间，通过指针的形式，来对数据进行存储，这样的形式即称为链式存储。</li><li>链式存储方式是给每个结点附加一个指针段，指针指向该结点的后继存储地址。</li><li>一个结点可能有多个后继，所以指针段可以是一个指针，也可以是多个指针。</li></ul><p>索引存储：</p><ul><li>在线性结构中，设开始结点的索引号为 1，其他结点的索引号等于其前继结点的索引号加 1，则每一个结点都有唯一的索引号。</li><li>索引号就是根据结点的索引号来确定该结点的存储地址。</li></ul><p>散列存储：</p><ul><li>散列存储的思想是构造一个从集合 K 到存储区域 M 的一个函数 h，</li><li>该函数的定义域为 K，值域为 M，K 中的每个结点 ki 在计算机中的存储地址由 h(ki) 确定。</li></ul>',48),o=[r];function h(p,n,u,d,s,c){return i(),l("div",null,o)}const f=a(t,[["render",h]]);export{b as __pageData,f as default};
